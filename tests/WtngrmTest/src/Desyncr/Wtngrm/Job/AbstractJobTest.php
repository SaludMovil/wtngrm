<?php
namespace Desyncr\Wtngrm\Job;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-21 at 20:50:00.
 */
class AbstractJobTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractJob
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BaseJob;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::set
     * @todo   Implement testSet().
     */
    public function testSet()
    {
        $val = 'test value';
        $this->object->set('key', $val);
        $this->assertEquals($val, $this->object->key);
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::set
     * @todo   Implement testSet().
     */
    public function testSetArray()
    {
        $val = array('key' => 'value');
        $this->object->set('array', $val);
        $this->assertEquals($val, $this->object->array);
        $this->assertEquals($val['key'], $this->object->array['key']);
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::set
     * @todo   Implement testSet().
     */
    public function testSetContructNonArray()
    {
        $this->markTestIncomplete();
        // TODO How to handle typehinting fatal errors? ie: no exceptions at
        // all
        // $props = 'non-array';
        // $this->object = new BaseJob($props);
        // $this->setExpectedException('Exception');
        // $this->assertEquals(null, $this->object->getId());
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $this->assertEquals(null, $this->object->get('id'));
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::get
     * @todo   Implement testGet().
     */
    public function testGetNonExistingProperty()
    {
        $this->assertEquals(null, $this->object->get('non-existing'));
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::get
     * @todo   Implement testGet().
     */
    public function testGetArray()
    {
        $array = array('id' => '123');
        $this->object->set('array', $array);
        $this->assertEquals($array, $this->object->get('array'));
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::get
     * @todo   Implement testGet().
     */
    public function testGetBadName()
    {
        $val = 'it works... for some reason';
        $this->object->set('this-is-weird', $val);
        $this->assertEquals($val, $this->object->get('this-is-weird'));
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::getId
     * @todo   Implement testGetId().
     */
    public function testGetIdUnsetted()
    {
        $this->assertEquals(null, $this->object->getId());
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::setId
     * @todo   Implement testSetId().
     */
    public function testSetId()
    {
        $id = 'test.id';
        $this->object->setId($id);

        $this->assertEquals($id, $this->object->getId());
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::setId
     * @todo   Implement testSetId().
     */
    public function testSetIdConstruct()
    {
        $job = array('id' => 'test.id');
        $this->object = new BaseJob($job);

        $this->assertEquals($job['id'], $this->object->getId());
    }

    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::setId
     * @todo   Implement testSetId().
     */
    public function testSetIdOverride()
    {
        $job = array('id' => 'test.id');
        $this->object = new BaseJob($job);

        $override = 'other.id';
        $this->object->setId($override);
        $this->assertEquals($override, $this->object->getId());
    }


    /**
     * @covers Desyncr\Wtngrm\Job\AbstractJob::serialize
     * @todo   Implement testSerialize().
     */
    public function testSerialize()
    {
        $id = 'test.id';
        $this->object->setId($id);
        $obj = \json_decode($this->object->serialize());

        $res = new \StdClass;
        $res->id = $id;
        $this->assertEquals($res, $obj);
    }
}
